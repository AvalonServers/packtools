#!/usr/bin/env python3
import os
import argparse
import tempfile
import shutil
import subprocess
import pathlib

from lib import packlib

CDN_ENDPOINT='https://s3.eu-west-1.wasabisys.com'
CDN_PROFILE='wasabi'
CDN_BUCKET='parallax-assets'
SERVER_TARGET='psn-worker-1'

def upload_cdn(pack, pack_dir, build_path):
  subprocess.run([
    'aws', 's3', 'cp',
    '--endpoint-url', CDN_ENDPOINT,
    '--profile', CDN_PROFILE,
    '--acl', 'public-read',
    os.path.join(build_path, 'mmc.zip'),
    f's3://{CDN_BUCKET}/packs/mmc/{pack.slug()}.zip'
  ])

  subprocess.run([
    'aws', 's3', 'sync',
    '--endpoint-url', CDN_ENDPOINT,
    '--profile', CDN_PROFILE,
    '--exclude', 'build/*',
    '--delete',
    '--acl', 'public-read',
    pack_dir,
    f's3://{CDN_BUCKET}/data/{pack.series}/{pack.name}'
  ])

def sync_toolchain():
  packtools = pathlib.Path(__file__).parent.resolve()
  subprocess.run([
    'rsync', '-avh', f'{packtools}/', '--exclude', '.venv', '--exclude', '.git', '--rsync-path', 'sudo -i -u avalon rsync', f'{SERVER_TARGET}:/var/lib/avalon/mc/tools/', '--delete'
  ])
  subprocess.run([
    'ssh', SERVER_TARGET, 'sudo chown -R avalon:avalon /var/lib/avalon/mc/tools && sudo chmod -R u+rwx,g+rwx /var/lib/avalon/mc/tools'
  ])

def set_live(path, pack, servers):
  # write the pack output
  print("exporting pack")
  writer = packlib.MMCPackWriter(pack.slug(), path)
  pack_output_path = os.path.join(path, 'build')
  with tempfile.TemporaryDirectory() as tmpdir:
    writer.write(tmpdir)
    os.makedirs(pack_output_path, exist_ok=True)
    shutil.make_archive(f"{pack_output_path}/mmc", "zip", tmpdir)

  print("uploading pack to CDN")
  upload_cdn(pack, path, pack_output_path)

  print("syncing toolchain with server")
  sync_toolchain()

  for i, server in enumerate(servers):
    server_data = servers[server]
    print(f"deploying instance {i+1} of {len(servers)}: {server}")
    subprocess.run(['ssh', SERVER_TARGET, f'sudo -i -u avalon /var/lib/avalon/mc/tools/scripts/deploy-server.sh {pack.name} {pack.series}/{pack.name} {server}'])

parser = argparse.ArgumentParser(description="Tool for setting live modpack changes")
parser.add_argument('-p', '--pack', type=str, default=os.curdir, help="The pack path")
parser.add_argument('-s', '--servers', type=str, default=None, help="The server to deploy to, or all to deploy to all servers. Defaults to none")

args = parser.parse_args()
pack_path = args.pack
extra_data = packlib.read_pack_supplementary_data(pack_path)

servers = []
if args.servers != None:
  server_keys = args.servers.split(',')
  if 'all' in server_keys:
    servers = extra_data.servers
  else:
    servers = {key: extra_data.servers[key] for key in server_keys}

set_live(pack_path, extra_data, servers)
