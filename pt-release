#!/usr/bin/env python3
import toml
import os
import git
import json
import semver
import argparse
import subprocess

from lib import packlib

parser = argparse.ArgumentParser(description="Tool for creating a pack update")
parser.add_argument("-p", "--pack", default=os.curdir, help="The pack path")
parser.add_argument("--major", action="store_true", help="Bump the major component")
parser.add_argument("--minor", action="store_true", help="Bump the minor component")
parser.add_argument("--patch", action="store_true", help="Bump the patch component")

args = parser.parse_args()
pack_path = args.pack
extra_data = packlib.read_pack_supplementary_data(pack_path)

with open(f"{pack_path}/pack.toml") as f:
    metadata = toml.load(f)

version = semver.VersionInfo.parse(metadata["version"])
print(f"current version: {version}")

if args.major:
    version = version.bump_major()
elif args.minor:
    version = version.bump_minor()
elif args.patch:
    version = version.bump_patch()
else:
    print("no component specified to bump")
    exit(1)
print(f"new version: {version}")

metadata["version"] = str(version)
print("writing new pack toml")
with open(f"{pack_path}/pack.toml", "w") as f:
    toml.dump(metadata, f)

print("writing bcc data")
bcc_data = {
    "projectID": 0,
    "modpackName": metadata["name"],
    "modpackVersion": metadata["version"],
    "useMetadata": False
}

os.makedirs(f"{pack_path}/config", exist_ok=True)
with open(f"{pack_path}/config/bcc.json", "w") as f:
    json.dump(bcc_data, f, indent=4)

print("refreshing pack hashes")
subprocess.run(["packwiz", "refresh"])

# print("creating release commit")
# subprocess.run(["git", "add", "-A"])
# subprocess.run([
#     "git", "-c", "commit.gpgsign=false",
#     "commit", "-m", f"Automated release commit for {version}"
# ])

# print("tagging release commit hash")
# subprocess.run(["git", "tag", f"v{str(version)}"])
